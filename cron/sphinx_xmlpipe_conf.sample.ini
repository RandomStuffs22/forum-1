[general]
; Note: "simple_delete" process before "preg_delete"

; remove tags with entries
preg_delete[] = "#\[quote(\.*?)?\].*?\[\/quote\]#is"
preg_delete[] = "#\[mergetime\].*?\[\/mergetime\]#is"
preg_delete[] = "#\[quote(.*?)?\]#is"
preg_delete[] = "#\[/quote]#is"
preg_delete[] = "#\[(mm|gm)\].*?\[\/(mm|gm)\]#is"

; remove opening tags for bbcodes with optional parameter
preg_delete[] = "#\[(list|color|size|email|url|thread|post|img|video)(=.*?)?\]#i"
; remove closing tags for bbcodes with optional parameter
preg_delete[] = "#\[\/(list|color|size|emal|url|thread|post|img|video)\]#i"

; remove simple bbcode
preg_delete[] = "#\[\/?(b|i|u|s|left|center|code|right|sub|sup|attach|mergetime|size|color)[^\]]+\]#i"

; smiles :{smile_code}:
preg_delete[] = "#\:(mellow:|lol:|rolleyes:|wub:|unsure:|wacko:|blink:|excl:|devil:|innocent:|bash:|angry:|ninja:|blush:|bleh:|coffee:|megalol:|haha:|clap:|harhar:|licklips:|gun_rifle:|drinks_cheers:|cry:|beer:|thumbsup:|wow:|confused:|\?:|D|P|o|\)|\()#"

; smiles
simple_delete[] = ";)"
simple_delete[] = "B)"
; simple_delete[] = "-_-"

; remove hyphens and dashes
; simple_delete[] = "-"



[index_general]
;xmlpipe_field[] = keywordtext
;xmlpipe_field[] = taglist

; field name, which will be cleaned by rules from general section

sql_range_step = 1000

[index_posts_main]
; Note: you can specify "parent" index to inherit the basic settings
xmlpipe_field[] = post
message_field = post

parent_index = index_general

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

;sql_query_pre[] = "
;        UPDATE
;            {table_prefix}vbsphinxsearch_queue
;        SET
;            `done` = '1'
;        WHERE
;            contenttypeid =
;                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'Post')"

sql_query = "
		SELECT 
		    pid as id, 
		    p.author_name, 
		    p.author_id, 
		    p.post_date, 
		    t.posts,
		    p.post, 
		    f.name as forum_title,
		    f.id as forum_id,
		    p.topic_id
		FROM ibf_posts p 
		INNER JOIN ibf_topics t ON (topic_id = tid) 
		INNER JOIN ibf_forums f ON (t.forum_id = f.id) 
		WHERE pid>=$start AND pid<=$end"

sql_query_range = "SELECT MIN(pid),MAX(pid) FROM ibf_posts"


;sql_query_post_index[] = "
;        DELETE FROM
;            {table_prefix}vbsphinxsearch_queue
;        WHERE
;            contenttypeid =
;                (SELECT contenttypeid
;                    FROM {table_prefix}contenttype
;                    WHERE class = 'Post') AND
;            done=1"

;sql_query_post_index[] = "
;        REPLACE INTO
;            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
;        SELECT
;            contenttypeid, (($maxid -  contenttypeid)/64)
;        FROM
;            {table_prefix}contenttype
;        WHERE
;;            class = 'Post'"

;sql_query_range = "SELECT MIN(postid),MAX(postid) FROM {table_prefix}post"

xmlpipe_attr_uint[] = posts
xmlpipe_attr_uint[] = author_id
xmlpipe_attr_uint[] = topic_id
xmlpipe_attr_uint[] = forum_id
xmlpipe_attr_timestamp[] = post_date
;xmlpipe_attr_timestamp[] = groupdateline
;xmlpipe_attr_uint[] = userid
;xmlpipe_attr_uint[] = groupuserid
;xmlpipe_attr_uint[] = prefixcrc
;xmlpipe_attr_uint[] = visible
;xmlpipe_attr_uint[] = replycount
;xmlpipe_attr_uint[] = views
;xmlpipe_attr_timestamp[] = groupstart
;xmlpipe_attr_uint[] = groupvisible
;xmlpipe_attr_uint[] = groupopen
;xmlpipe_attr_uint[] = groupparentid
;xmlpipe_attr_bool[] = deleted
;xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = author_name
xmlpipe_attr_str2ordinal[] = forum_title
; xmlpipe_attr_str2ordinal[] = groupusernamesort






;[index_general]
;xmlpipe_field[] = grouptitle
;xmlpipe_field[] = keywordtext
;xmlpipe_field[] = taglist

; field name, which will be cleaned by rules from general section
;message_field = keywordtext

;sql_range_step = 1000

[index_topics_main]
; Note: you can specify "parent" index to inherit the basic settings
; xmlpipe_field[] = post
xmlpipe_field[] = title
message_field = title
parent_index = index_general

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"


sql_query = "
		SELECT 
		    tid as id, 
		    t.starter_name, 
		    t.starter_id as author_id, 
		    t.last_post as post_date, 
		    t.title as title,
		    t.posts,
		    f.name as forum_title,
		    f.id as forum_id,
		    (select min(pid) from ibf_posts p where p.topic_id = t.tid) as post_id
		FROM ibf_topics t
		INNER JOIN ibf_forums f ON (t.forum_id = f.id) 
		WHERE tid>=$start AND tid<=$end"


sql_query_range = "SELECT MIN(tid),MAX(tid) FROM ibf_topics"


xmlpipe_attr_uint[] = author_id
xmlpipe_attr_uint[] = forum_id
xmlpipe_attr_uint[] = post_id
xmlpipe_attr_uint[] = posts
xmlpipe_attr_timestamp[] = post_date
xmlpipe_attr_str2ordinal[] = starter_name
xmlpipe_attr_str2ordinal[] = forum_title


[index_threadpost_delta]

parent_index = index_threadpost_main
sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
            SELECT (p.postid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			p.threadid AS groupid,
			p.postid AS primaryid,
			p.dateline AS dateline,
    	    LOWER(t.lastpost) AS groupdateline,
			t.title AS grouptitle,
			p.userid AS userid,
			t.postuserid AS groupuserid,
			LOWER(CONCAT(IFNULL(p.title, ''),' ', IFNULL(p.pagetext, ''))) AS keywordtext,
    	    CRC32( t.prefixid ) AS prefixcrc,
			p.visible AS visible,
			t.replycount AS replycount,
			IF(t.views<=t.replycount, t.replycount+1, t.views) AS views,
			t.dateline AS groupstart,
			t.visible AS groupvisible,
			t.open AS groupopen,
			(t.forumid*64 + c.contenttypeid) AS groupparentid,
    	    0 AS deleted,
            IF(p.parentid =0, 1, 0 ) AS isfirst,
            LOWER(t.title) AS grouptitlesort,
            LOWER(p.username) AS usernamesort,
            LOWER(t.postusername) AS groupusernamesort,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = tgc.`contenttypeid`
                    AND tg.contentid = p.threadid
                GROUP BY `contentid`
            ) AS taglist
		FROM {table_prefix}post AS p
		JOIN {table_prefix}vbsphinxsearch_queue sq ON
            sq.primaryid = p.postid AND
            sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'Post')
		JOIN {table_prefix}thread AS t ON
			p.threadid = t.threadid
		JOIN {table_prefix}contenttype AS c
		JOIN {table_prefix}contenttype AS tgc
		WHERE
			c.class = 'Post'
			AND tgc.class = 'Thread'
			AND p.postid>=$start AND p.postid<=$end"

sql_query_post_index[] = ""

sql_query_killlist = "
        SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'Post') AND
            sq.primaryid <= sc.maxprimaryid"


[index_blog_entry_main]

parent_index = index_general

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'BlogEntry')"


sql_query = "
		SELECT
			(bt.blogtextid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			bt.blogid AS groupid,
			bt.blogtextid AS primaryid,
			bt.dateline AS dateline,
			b.lastcomment AS groupdateline,
			LOWER(bt.title) AS grouptitle,
			bt.bloguserid AS userid,
			bt.bloguserid AS groupuserid,
			LOWER(bt.pagetext) AS keywordtext,
			IF(bt.state = 'visible', 1, 0) AS visible,
            0 AS deleted,
            1 AS isfirst,
            LOWER(bt.title) AS grouptitlesort,
            LOWER(bt.username) AS usernamesort,
            LOWER(bt.username) AS groupusernamesort,
            (b.userid*64 + c.contenttypeid)  AS groupparentid,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = c.contenttypeid
                    AND tg.contentid = bt.blogid
                GROUP BY `contentid`
            ) AS taglist
		FROM {table_prefix}blog_text AS bt
        JOIN {table_prefix}blog AS b ON bt.blogtextid = b.firstblogtextid
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'BlogEntry'
			AND bt.blogtextid>=$start AND bt.blogtextid<=$end"

sql_query_range = "SELECT MIN(blogtextid),MAX(blogtextid) FROM {table_prefix}blog_text"

sql_query_post_index[] = "DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'BlogEntry') AND
            done=1"

sql_query_post_index[] = "REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'BlogEntry'"

sql_query_killlist ="SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'BlogEntry') AND
            sq.primaryid <= sc.maxprimaryid"

xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = groupuserid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_bool[] = deleted
xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = grouptitlesort
xmlpipe_attr_str2ordinal[] = usernamesort
xmlpipe_attr_str2ordinal[] = groupusernamesort

;necessary for compatibility
xmlpipe_attr_uint[] = groupparentid

[index_blog_entry_delta]
parent_index = index_blog_entry_main

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
        SELECT
			(bt.blogtextid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			bt.blogid AS groupid,
			bt.blogtextid AS primaryid,
			bt.dateline AS dateline,
			b.lastcomment AS groupdateline,
			LOWER(bt.title) AS grouptitle,
			bt.bloguserid AS userid,
			bt.bloguserid AS groupuserid,
			LOWER(bt.pagetext) AS keywordtext,
			IF(bt.state = 'visible', 1, 0) AS visible,
            0 AS deleted,
            1 AS isfirst,
            LOWER(bt.title) AS grouptitlesort,
            LOWER(bt.username) AS usernamesort,
            LOWER(bt.username) AS groupusernamesort,
            (b.userid*64 + c.contenttypeid)  AS groupparentid,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = c.contenttypeid
                    AND tg.contentid = bt.blogid
                GROUP BY `contentid`
            ) AS taglist
		FROM {table_prefix}blog_text AS bt
		JOIN {table_prefix}blog AS b ON bt.blogtextid = b.firstblogtextid
		JOIN {table_prefix}vbsphinxsearch_queue sq ON
				(sq.primaryid = bt.blogtextid AND  sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'BlogEntry'))
		JOIN {table_prefix}contenttype AS c
		WHERE
				c.class = 'BlogEntry'
				AND bt.blogtextid>=$start AND bt.blogtextid<=$end"


sql_query_post_index[] = ""

[index_blog_comment_main]
parent_index = index_general

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "
        UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'BlogComment')"

sql_query = "
		SELECT
			(bt.blogtextid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			bt.blogid AS groupid,
			bt.blogtextid AS primaryid,
			bt.dateline AS dateline,
			b.lastcomment AS groupdateline,
			LOWER(b.title) AS grouptitle,
			bt.bloguserid AS userid,
			bt.bloguserid AS groupuserid,
			LOWER(bt.pagetext) AS keywordtext,
			IF(bt.state = 'visible', 1, 0) AS visible,
			0 AS deleted,
            0 AS isfirst,
            LOWER(b.title) AS grouptitlesort,
            LOWER(bt.username) AS usernamesort,
            LOWER(bt.username) AS groupusernamesort,
            (b.userid*64 + c.contenttypeid)  AS groupparentid,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = tgc.`contenttypeid`
                    AND tg.contentid = bt.blogid
                GROUP BY `contentid`
            ) AS taglist
		FROM {table_prefix}blog_text AS bt
		JOIN {table_prefix}blog AS b ON
			(b.blogid = bt.blogid AND b.firstblogtextid != bt.blogtextid)
		JOIN {table_prefix}contenttype AS c
		JOIN {table_prefix}contenttype AS tgc
		WHERE
			c.class = 'BlogComment'
            AND tgc.class = 'BlogEntry'
			AND bt.blogtextid>=$start AND bt.blogtextid<=$end"

sql_query_range = "SELECT MIN(blogtextid),MAX(blogtextid) FROM {table_prefix}blog_text"

sql_query_post_index[] = "
        DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'BlogComment') AND
            done=1"

sql_query_post_index[] = "REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'BlogComment'"

sql_query_killlist = "
        SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'BlogComment') AND 
            sq.primaryid <= sc.maxprimaryid"

xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = groupuserid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_bool[] = deleted
xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = grouptitlesort
xmlpipe_attr_str2ordinal[] = usernamesort
xmlpipe_attr_str2ordinal[] = groupusernamesort

;necessary for compatibility
xmlpipe_attr_uint[] = groupparentid
	
[index_blog_comment_delta]
parent_index = index_blog_comment_main

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
		SELECT
			(bt.blogtextid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			bt.blogid AS groupid,
			bt.blogtextid AS primaryid,
			bt.dateline AS dateline,
			b.lastcomment AS groupdateline,
			LOWER(b.title) AS grouptitle,
			bt.bloguserid AS userid,
			bt.bloguserid AS groupuserid,
			LOWER(bt.pagetext) AS keywordtext,
			IF(bt.state = 'visible', 1, 0) AS visible,
            0 AS deleted,
            0 AS isfirst,
            LOWER(b.title) AS grouptitlesort,
            LOWER(bt.username) AS usernamesort,
            LOWER(bt.username) AS groupusernamesort,
            (b.userid*64 + c.contenttypeid)  AS groupparentid,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = tg.`contenttypeid`
                    AND tg.contentid = bt.blogid
                GROUP BY `contentid`
            ) AS taglist
		FROM {table_prefix}blog_text AS bt
		JOIN {table_prefix}blog AS b ON
			(b.blogid = bt.blogid AND b.firstblogtextid != bt.blogtextid)
		JOIN {table_prefix}vbsphinxsearch_queue sq ON
			(sq.primaryid = bt.blogtextid AND  sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'BlogComment'))
		JOIN {table_prefix}contenttype AS c
		JOIN {table_prefix}contenttype AS tgc
		WHERE
			c.class = 'BlogComment'
            AND tgc.class = 'BlogEntry'
			AND bt.blogtextid>=$start AND bt.blogtextid<=$end"

sql_query_post_index[] = ""


[index_discussion_message_main]
parent_index = index_general

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "
        UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'SocialGroupMessage')"

sql_query = "
		SELECT
			(gm.gmid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			gm.discussionid AS groupid,
			gm.gmid AS primaryid,
			gm.dateline AS dateline,
			gm.dateline AS groupdateline,
			gm.postuserid AS userid,
			fp.postuserid AS groupuserid,
			LOWER(fp.title) AS grouptitle,
			LOWER(gm.pagetext) AS keywordtext,
			IF(gm.state = 'visible', 1, 0) AS visible,
            (d.groupid*64 + c.contenttypeid) AS groupparentid,
            0 AS deleted,
            IF(gm.gmid = d.firstpostid, 1, 0 ) AS isfirst,
            LOWER(fp.title) AS grouptitlesort,
            LOWER(gm.postusername) AS usernamesort,
            LOWER(fp.postusername) AS groupusernamesort,
            '' AS taglist
		FROM {table_prefix}groupmessage AS gm
		JOIN {table_prefix}discussion AS d ON
			(gm.discussionid = d.discussionid)
		JOIN {table_prefix}groupmessage AS fp ON
			(d.firstpostid = fp.gmid)
		JOIN {table_prefix}contenttype c
		WHERE
			c.class = 'SocialGroupMessage'
			AND gm.gmid>=$start AND gm.gmid<=$end"


sql_query_range = "SELECT MIN(gmid),MAX(gmid) FROM {table_prefix}groupmessage"

sql_query_post_index[] = "
        DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'SocialGroupMessage') AND
            done=1"

sql_query_post_index[] = "
        REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'SocialGroupMessage'"

sql_query_killlist = "
        SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'SocialGroupMessage') AND
            sq.primaryid <= sc.maxprimaryid"

xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = groupuserid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_uint[] = groupparentid
xmlpipe_attr_bool[] = deleted
xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = grouptitlesort
xmlpipe_attr_str2ordinal[] = usernamesort
xmlpipe_attr_str2ordinal[] = groupusernamesort


[index_discussion_message_delta]
parent_index = index_discussion_message_main

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
		SELECT (gm.gmid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			gm.discussionid AS groupid,
			gm.gmid AS primaryid,
			gm.dateline AS dateline,
			gm.dateline AS groupdateline,
			gm.postuserid AS userid,
			fp.postuserid AS groupuserid,
			LOWER(fp.title) AS grouptitle,
			LOWER(gm.pagetext) AS keywordtext,
			IF(gm.state = 'visible', 1, 0) AS visible,
			(d.groupid*64 + c.contenttypeid) AS groupparentid,
            0 AS deleted,
            IF(gm.gmid = d.firstpostid, 1, 0 ) AS isfirst,
            LOWER(fp.title) AS grouptitlesort,
            LOWER(gm.postusername) AS usernamesort,
            LOWER(fp.postusername) AS groupusernamesort,
            '' AS taglist
        FROM {table_prefix}groupmessage AS gm
		JOIN {table_prefix}vbsphinxsearch_queue sq ON (
				(sq.primaryid = gm.gmid AND sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'SocialGroupMessage'))
				OR
				(sq.primaryid = gm.discussionid AND sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'SocialGroupDiscussion'))
			)
		JOIN {table_prefix}discussion AS d ON
			(gm.discussionid = d.discussionid)
		JOIN {table_prefix}groupmessage AS fp ON
			(d.firstpostid = fp.gmid)
		JOIN {table_prefix}contenttype c
		WHERE
			c.class = 'SocialGroupMessage'
			AND gm.gmid>=$start AND gm.gmid<=$end"

sql_query_post_index[] = ""


[index_social_group_main]
parent_index = index_general

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "
        UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'SocialGroup')"

sql_query = "
        SELECT
			(sg.groupid*64 + c.contenttypeid) AS id,
			sg.groupid AS groupid,
			c.contenttypeid AS contenttypeid,
			sg.groupid AS primaryid,
			sg.dateline AS dateline,
			sg.lastpost AS groupdateline,
			LOWER(sg.name) AS grouptitle,
			sg.creatoruserid AS userid,
			LOWER(sg.description) AS keywordtext,
			IF(sg.visible <= 0, 0, 1) AS visible,
			sg.members AS members,
			sg.discussions AS discussions,
			sg.visible AS messages,
			sg.picturecount AS pictures,
			sg.socialgroupcategoryid AS socialgroupcategoryid,
            0 AS deleted,
            0 AS isfirst,
            LOWER(sg.name) AS grouptitlesort,
            LOWER(u.username) AS usernamesort,
            LOWER(u.username) AS groupusernamesort,
            (sg.socialgroupcategoryid*64 + c.contenttypeid)  AS groupparentid,
            '' AS taglist
		FROM {table_prefix}socialgroup AS sg
		JOIN {table_prefix}user AS u ON
			sg.creatoruserid = u.userid
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'SocialGroup'
			AND sg.groupid>=$start AND sg.groupid<=$end"

sql_query_post_index[] = "
        DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'SocialGroup') AND
            done=1;"

sql_query_range = "SELECT MIN(groupid),MAX(groupid) FROM {table_prefix}socialgroup"

sql_query_post_index[] = "
        REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'SocialGroup'"

sql_query_killlist = "
        SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'SocialGroup') AND
            sq.primaryid <= sc.maxprimaryid"


xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_uint[] = members
xmlpipe_attr_uint[] = discussions
xmlpipe_attr_uint[] = messages
xmlpipe_attr_uint[] = pictures
xmlpipe_attr_uint[] = socialgroupcategoryid
xmlpipe_attr_bool[] = deleted
xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = grouptitlesort
xmlpipe_attr_str2ordinal[] = usernamesort
xmlpipe_attr_str2ordinal[] = groupusernamesort

;necessary for compatibility
xmlpipe_attr_uint[] = groupparentid

[index_social_group_delta]
parent_index = index_social_group_main

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
		SELECT
			(sg.groupid*64 + c.contenttypeid) AS id,
			sg.groupid AS groupid,
			c.contenttypeid AS contenttypeid,
			sg.groupid AS primaryid,
			sg.dateline AS dateline,
			sg.lastpost AS groupdateline,
			LOWER(sg.name) AS grouptitle,
			sg.creatoruserid AS userid,
			LOWER(sg.description) AS keywordtext,
			IF(sg.visible <= 0, 0, 1) AS visible,
			sg.members AS members,
			sg.discussions AS discussions,
			sg.visible AS messages,
			sg.picturecount AS pictures,
			sg.socialgroupcategoryid AS socialgroupcategoryid,
            0 AS deleted,
            0 AS isfirst,
            LOWER(sg.name) AS grouptitlesort,
            LOWER(u.username) AS usernamesort,
            LOWER(u.username) AS groupusernamesort,
            (sg.socialgroupcategoryid*64 + c.contenttypeid)  AS groupparentid,
            '' AS taglist
		FROM {table_prefix}socialgroup AS sg
		JOIN {table_prefix}user AS u ON
			sg.creatoruserid = u.userid
		JOIN {table_prefix}vbsphinxsearch_queue sq ON
			(sq.primaryid = sg.groupid AND  sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'SocialGroup'))
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'SocialGroup'
			AND sg.groupid>=$start AND sg.groupid<=$end"

sql_query_post_index[] = ""


[index_cms_articles_main]
parent_index = index_general
sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "
        UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'Article')"


sql_query = "
		SELECT
			(a.contentid*64 + c.contenttypeid) AS id,
			a.contentid AS groupid,
			c.contenttypeid AS contenttypeid,
			a.contentid AS primaryid,
			n.publishdate AS dateline,
			n.publishdate AS groupdateline,
			LOWER(i.title) AS grouptitle,
			n.userid AS userid,
	        0 AS deleted,
			LOWER(a.pagetext) AS keywordtext,
			1 AS visible,
            1 AS isfirst,
            LOWER(i.title) AS grouptitlesort,
            LOWER(u.username) AS usernamesort,
            LOWER(u.username) AS groupusernamesort,
            0 AS groupparentid,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = c.contenttypeid
                    AND tg.contentid = a.contentid
                GROUP BY `contentid`
            ) AS taglist
		FROM {table_prefix}cms_article a
		LEFT JOIN {table_prefix}cms_node n ON
			n.contentid = a.contentid
  		LEFT JOIN {table_prefix}cms_nodeinfo i ON
			i.nodeid = n.nodeid
  		LEFT JOIN {table_prefix}user u ON
			u.userid = n.userid
  		JOIN {table_prefix}contenttype AS c
		WHERE
			n.contenttypeid = c.contenttypeid
			AND c.class = 'Article'
			AND a.contentid>=$start AND a.contentid<=$end"

sql_query_range = "SELECT MIN(contentid),MAX(contentid) FROM {table_prefix}cms_article"

sql_query_post_index[] = "
        DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'Article') AND
            done=1"

sql_query_post_index[] = "
        REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'Article'"

sql_query_killlist = "SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'Article') AND
            sq.primaryid <= sc.maxprimaryid"

xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_bool[] = deleted
xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = grouptitlesort
xmlpipe_attr_str2ordinal[] = usernamesort
xmlpipe_attr_str2ordinal[] = groupusernamesort

;necessary for compatibility
xmlpipe_attr_uint[] = groupparentid

[index_cms_articles_delta]
parent_index = index_cms_articles_main

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
		SELECT
			(a.contentid*64 + c.contenttypeid) AS id,
			a.contentid AS groupid,
			c.contenttypeid AS contenttypeid,
			a.contentid AS primaryid,
			n.publishdate AS dateline,
			n.publishdate AS groupdateline,
			LOWER(i.title) AS grouptitle,
			n.userid AS userid,
	        0 AS deleted,
			LOWER(a.pagetext) AS keywordtext,
			1 AS visible,
            1 AS isfirst,
            LOWER(i.title) AS grouptitlesort,
            LOWER(u.username) AS usernamesort,
            LOWER(u.username) AS groupusernamesort,
            0 AS groupparentid,
            (
                SELECT 
                    GROUP_CONCAT(DISTINCT `tagid` SEPARATOR ' ') as taglist
                FROM 
                    {table_prefix}tagcontent AS tg
                WHERE 
                    tg.`contenttypeid` = c.contenttypeid
                    AND tg.contentid = a.contentid
                GROUP BY `contentid`
            ) AS taglist
		FROM
			{table_prefix}cms_article a
		LEFT JOIN {table_prefix}cms_node n ON
			n.contentid = a.contentid
  		LEFT JOIN {table_prefix}cms_nodeinfo i ON
			i.nodeid = n.nodeid
  		LEFT JOIN {table_prefix}user u ON
			u.userid = n.userid
  		JOIN {table_prefix}vbsphinxsearch_queue sq ON
			(sq.primaryid = a.contentid AND  sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'Article'))
  		JOIN {table_prefix}contenttype AS c
		WHERE
			n.contenttypeid = c.contenttypeid
			AND c.class = 'Article'
			AND a.contentid>=$start AND a.contentid<=$end"

sql_query_post_index[] = ""



[index_visitor_message_main]
parent_index = index_general
sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "
        UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'VisitorMessage')"

sql_query = "
		SELECT
			(vm.vmid*64 + c.contenttypeid) AS id,
			vm.vmid AS groupid,
			c.contenttypeid AS contenttypeid,
			vm.vmid AS primaryid,
			vm.dateline AS dateline,
			vm.dateline AS groupdateline,
			LOWER(vm.title) AS grouptitle,
			vm.postuserid AS userid,
			LOWER(vm.pagetext) AS keywordtext,
			IF(vm.state <> 'visible', 0, 1) AS visible,
            0 AS deleted,
            1 AS isfirst,
            LOWER(vm.title) AS grouptitlesort,
            LOWER(vm.postusername) AS usernamesort,
            LOWER(vm.postusername) AS groupusernamesort,
            0 AS groupparentid
            '' AS taglist
		FROM {table_prefix}visitormessage AS vm
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'VisitorMessage'
			AND vm.vmid>=$start AND vm.vmid<=$end"

sql_query_range = "SELECT MIN(vmid),MAX(vmid) FROM {table_prefix}visitormessage"

sql_query_post_index[] = "
        DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'VisitorMessage') AND
            done=1"

sql_query_post_index[] = "
        REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'VisitorMessage'"

sql_query_killlist = "
        SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'VisitorMessage') AND
            sq.primaryid <= sc.maxprimaryid"

xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_bool[] = deleted
xmlpipe_attr_bool[] = isfirst
xmlpipe_attr_str2ordinal[] = grouptitlesort
xmlpipe_attr_str2ordinal[] = usernamesort
xmlpipe_attr_str2ordinal[] = groupusernamesort

;necessary for compatibility
xmlpipe_attr_uint[] = groupparentid

[index_visitor_message_delta]
parent_index = index_visitor_message_main
sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
		SELECT
			(vm.vmid*64 + c.contenttypeid) AS id,
			vm.vmid AS groupid,
			c.contenttypeid AS contenttypeid,
			vm.vmid AS primaryid,
			vm.dateline AS dateline,
			vm.dateline AS groupdateline,
			LOWER(vm.title) AS grouptitle,
			vm.postuserid AS userid,
			LOWER(vm.pagetext) AS keywordtext,
			IF(vm.state <> 'visible', 0, 1) AS visible,
            0 AS deleted,
            1 AS isfirst,
            LOWER(vm.title) AS grouptitlesort,
            LOWER(vm.postusername) AS usernamesort,
            LOWER(vm.postusername) AS groupusernamesort,
            0 AS groupparentid,
            '' AS taglist
		FROM {table_prefix}visitormessage AS vm
		JOIN {table_prefix}vbsphinxsearch_queue sq ON
			(sq.primaryid = vm.vmid AND  sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'VisitorMessage'))
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'VisitorMessage'
			AND vm.vmid>=$start AND vm.vmid<=$end"

sql_query_post_index[] = ""

[index_forum_main]
parent_index = index_general
sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query_pre[] = "UPDATE
            {table_prefix}vbsphinxsearch_queue
        SET
            `done` = '1'
        WHERE
            contenttypeid =
                (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'Forum')"

sql_query = "SELECT
			(f.forumid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			f.forumid AS groupid,
			f.forumid AS primaryid,
			f.lastpost AS dateline,
			f.lastpost AS groupdateline,
			LOWER(f.title) AS grouptitle,
			0 AS userid,
			0 AS defaultuserid,
			LOWER(f.description) AS keywordtext,
			IF(f.displayorder <= 0, 0, 1) AS visible,
			f.threadcount AS threadcount,
			f.replycount AS replycount,
            0 AS groupparentid,
            '' AS taglist
		FROM {table_prefix}forum f
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'Forum'
			AND forumid>=$start AND forumid<=$end"

sql_query_post_index[] = "
        DELETE FROM
            {table_prefix}vbsphinxsearch_queue
        WHERE
            contenttypeid =
                (SELECT contenttypeid
                    FROM {table_prefix}contenttype
                    WHERE class = 'Forum') AND
            done=1"

sql_query_post_index[] = "REPLACE INTO
            {table_prefix}vbsphinxsearch_counters ( contenttypeid, maxprimaryid )
        SELECT
            contenttypeid, (($maxid -  contenttypeid)/64)
        FROM
            {table_prefix}contenttype
        WHERE
            class = 'Forum'"

sql_query_range = "SELECT MIN(forumid),MAX(forumid) FROM {table_prefix}forum"

sql_query_killlist = "SELECT
            ((sq.primaryid )*64 + sq.contenttypeid) AS id
        FROM
            {table_prefix}vbsphinxsearch_queue AS sq
        LEFT JOIN {table_prefix}vbsphinxsearch_counters AS sc ON
			sq.contenttypeid = sc.contenttypeid
        WHERE
            sq.contenttypeid = (SELECT contenttypeid FROM {table_prefix}contenttype WHERE class = 'Forum') AND
            sq.primaryid <= sc.maxprimaryid"


xmlpipe_attr_uint[] = contenttypeid
xmlpipe_attr_uint[] = groupid
xmlpipe_attr_uint[] = primaryid
xmlpipe_attr_timestamp[] = dateline
xmlpipe_attr_timestamp[] = groupdateline
xmlpipe_attr_uint[] = userid
xmlpipe_attr_uint[] = defaultuserid
xmlpipe_attr_uint[] = visible
xmlpipe_attr_uint[] = threadcount
xmlpipe_attr_uint[] = replycount

;necessary for compatibility
xmlpipe_attr_uint[] = groupparentid



[index_forum_delta]
parent_index = index_forum_main

sql_query_pre[] = "SET SESSION query_cache_type=OFF"
sql_query_pre[] = "SET NAMES UTF8"

sql_query = "
		SELECT
			(f.forumid*64 + c.contenttypeid) AS id,
			c.contenttypeid AS contenttypeid,
			f.forumid AS groupid,
			f.forumid AS primaryid,
			f.lastpost AS dateline,
			f.lastpost AS groupdateline,
			LOWER(f.title) AS grouptitle,
			0 AS userid,
			0 AS defaultuserid,
			LOWER(f.description) AS keywordtext,
			IF(f.displayorder <= 0, 0, 1) AS visible,
			f.threadcount AS threadcount,
			f.replycount AS replycount,
            0 AS groupparentid,
            '' AS taglist
		FROM {table_prefix}forum f
		JOIN {table_prefix}vbsphinxsearch_queue sq ON
			(sq.primaryid = f.forumid AND  sq.contenttypeid = (SELECT c.contenttypeid FROM {table_prefix}contenttype c WHERE c.class = 'Forum'))
		JOIN {table_prefix}contenttype AS c
		WHERE
			c.class = 'Forum'
			AND forumid>=$start AND forumid<=$end"

sql_query_post_index[] = ""
